# -*- coding: utf-8 -*-
"""trainingmdl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aiajUelZLCkNfsBV-a1nCHo1kVkZEely
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import tensorflow as tf
from tensorflow.keras import models ,layers
import matplotlib.pyplot as plt
import numpy as np
from tensorflow import keras

Image_size=256
Batch_size=32
Channels=3
Epoch=50
dataset=tf.keras.preprocessing.image_dataset_from_directory("PlantVillage",
                                                            shuffle=True,
                                                            image_size=(Image_size,Image_size),
                                                            batch_size=Batch_size
                                                            )

class_names=dataset.class_names

def get_dataset_partitions_tf(ds,train_split=0.8,val_split=0.1,test_split=0.1,shuffle=True,shuffle_size=1000):

    ds_size=len(ds)
    if shuffle:
        ds=ds.shuffle(shuffle_size,seed=12)#here random data of 1000 are shuffle by 2^12 different ways
    #these lines perform same things like above ones
    train_size=int(train_split*ds_size)
    val_size=int(val_split*ds_size)

    train_ds=ds.take(train_size)
    val_ds=ds.skip(train_size).take(val_size)#here we skip and take data in one line for validation data set
    test_ds=ds.skip(train_size).skip(val_size)

    return train_ds,val_ds,test_ds

train_ds,val_ds,test_ds=get_dataset_partitions_tf(dataset)

train_ds=train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds=val_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
test_ds=test_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)

resize_rescale=tf.keras.Sequential([

    layers.experimental.preprocessing.Resizing(Image_size,Image_size),
    layers.experimental.preprocessing.Rescaling(1.0/255)
])

data_agumantation=tf.keras.Sequential([

    layers.experimental.preprocessing.RandomFlip("horizontal_and_vertical"),
    layers.experimental.preprocessing.RandomRotation(0.2)
])

input_shape=(Batch_size,Image_size,Image_size,Channels)
n_classes=3
model=models.Sequential([
resize_rescale,
data_agumantation,
layers.Conv2D(32,(3,3),activation="relu",input_shape=input_shape),
layers.MaxPooling2D((2,2)),
layers.Conv2D(64,(3,3),activation="relu"),
layers.MaxPooling2D((2,2)),
layers.Conv2D(64,(3,3),activation="relu"),
layers.MaxPooling2D((2,2)),
layers.Conv2D(64,(3,3),activation="relu"),
layers.MaxPooling2D((2,2)),
layers.Conv2D(64,(3,3),activation="relu"),
layers.MaxPooling2D((2,2)),
layers.Conv2D(64,(3,3),activation="relu"),
layers.MaxPooling2D((2,2)),
layers.Flatten(),
layers.Dense(64,activation="relu"),
layers.Dense(n_classes,activation="softmax"),
])

model.build(input_shape=input_shape)

model.summary()

model.compile(
    optimizer="adam",
   loss= tf.keras.losses.SparseCategoricalCrossentropy( from_logits=False
    ),
    metrics=["accuracy"]
)

model_version=1
history=model.fit(train_ds,epochs=Epoch,batch_size=Batch_size,verbose=1,validation_data=val_ds)

model.evaluate(test_ds)

history

history.params

history.history.keys()

len(history.history["accuracy"])

acc=history.history["accuracy"]
loss=history.history["loss"]
val_accuracy=history.history["val_accuracy"]
val_loss=history.history["val_loss"]

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(range(Epoch),acc,label="Training Accuracy")
plt.plot(range(Epoch),val_accuracy,label="Validaion Accuracy")
plt.legend(loc="lower right")
plt.title("Training and Validation Accuracy")

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(range(Epoch),loss,label="Training loss")
plt.plot(range(Epoch),val_loss,label="Validaion loss")
plt.legend(loc="upper right")
plt.title("Training and Validation Accuracy")

for images_batch,label_batch in test_ds.take(1):
    first_image=images_batch[0].numpy().astype("uint8")
    first_label=label_batch[0].numpy()
    print("First image to predict")
    plt.imshow(first_image)
    print("Actual_label:",class_names[first_label])
    
    predict_label=model.predict(images_batch)# it return values and which value is greater its index is class name of given image
    print("Prediction lable:",class_names[np.argmax(predict_label[0])])#argmax function is used to find the greater value index and then we give this index to class_names function to find class name

def predict(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)

    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

plt.figure(figsize=(15, 15))
for images, labels in test_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        predicted_class, confidence=predict(model,images[i].numpy())
        actual_class=class_names[labels[i]]
        plt.title(f"Actual class:{actual_class},\n Predicted:{predicted_class},\n Confidence{confidence}%")
        plt.axis("off")

model.save("../potatoes.h5")



model.save('model',save_format='tf')

